#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <signal.h>

void read_childproc(int sig);
void error_handling(char *message);

#define BUF_SIZE 1024

int main(int argc,char *argv[])
{
        int flag=0;
        char message[BUF_SIZE];
        char m[BUF_SIZE]="End of message";
        int fp;
        int str_len;
        pid_t pid;
        struct sigaction act;
        int state;
        char text[BUF_SIZE];
        int serv,clnt;
        FILE* writefp;
        int count;
        char file_name[BUF_SIZE];
        struct sockaddr_in serv_adr,clnt_adr;
        socklen_t clnt_adr_sz;

        if(argc!=2)
        {
                printf("Usage:%s <port> \n",argv[0]);
                exit(1);
        }
        act.sa_handler=read_childproc;
        sigemptyset(&act.sa_mask);
        act.sa_flags=0;
        state=sigaction(SIGCHLD,&act,0);

        serv=socket(PF_INET,SOCK_STREAM,0);
        memset(&serv_adr,0,sizeof(serv_adr));
        serv_adr.sin_family=AF_INET;
        serv_adr.sin_addr.s_addr=htonl(INADDR_ANY);
        serv_adr.sin_port=htons(atoi(argv[1]));

        if(bind(serv,(struct sockaddr*)&serv_adr,sizeof(serv_adr))==-1)
                error_handling("bind error");
        if(listen(serv,5)==-1)
                error_handling("listen() error");

        while(1){

        clnt_adr_sz=sizeof(clnt_adr);
        clnt=accept(serv,(struct sockaddr*)&clnt_adr,&clnt_adr_sz);
        if(clnt==-1)
                continue;
        else
                puts("connected");
        pid=fork();
        if(pid==-1)
        {
                close(clnt);
                continue;
        }
        if(pid==0){
                close(serv);
                flag++;
                while(1)
                {

                        str_len=read(clnt,message,BUF_SIZE);
                        
                      
                        if(str_len==-1)
                                error_handling("read error");
                        if(flag==1){
                                if(!strcmp(message,"q\n") || !strcmp(message,"Q\n")){
                                     printf("file name input:");
                                     scanf("%s",file_name);
                                     writefp=fopen(file_name,"ab");
                                     fwrite((void*)message,sizeof(char),2,writefp);
                                     write(clnt,m,BUF_SIZE);
                                     flag=0;
                                     break;
                                }
                                else{
									printf("file name input :");
									scanf("%s",file_name);
									writefp=fopen(file_name,"ab");
									flag=0;
                                }

                        }
                        if(!strcmp(message,"q\n") || !strcmp(message,"Q\n")){
                               fwrite((void*)message,sizeof(char),2,writefp);
                               write(clnt,m,BUF_SIZE);
                               break;
                        }
                        else{
                               fwrite((void*)message,sizeof(char),str_len,writefp);
                               write(clnt,message,str_len);
                        }
                        if(str_len==0)
                                break;
                }
                close(clnt);
                puts("client disconnected...");
                fclose(writefp);
                return 0;
        }
        else
                 close(clnt);
        }
        close(serv);
        return 0;

}
void read_childproc(int sig)
{
        pid_t pid;
        int status;
        pid=waitpid(-1,&status,WNOHANG);
        printf("removed proc: %d \n",pid);
}

void error_handling(char* message)
{
        fputs(message,stderr);
        fputc('\n',stderr);
        exit(1);
}
